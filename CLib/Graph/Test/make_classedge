# specifying the C Compiler and Compiler Flags for make to use
CC     = gcc
CFLAGS = -Wall -std=c99

# exe name and a list of object files that make up the program
EXE    = main_class
OBJ    = main_class.o list.o stack.o queue.o graph.o heap.o item.o edge_class.o

PLIST  = ../../LinkedList/
PHEAP  = ../../Heap/
PITEM  = ../../item/
PGRAPH = ../

PLIST  = ../../LinkedList/
LISTC  = $(PLIST)list.c
LISTH   = $(PLIST)list.h

QUEUEC  = $(PLIST)queue.c
QUEUEH  = $(PLIST)queue.h

STACKC  = $(PLIST)stack.c
STACKH  = $(PLIST)stack.h

HEAPC   = $(PHEAP)heap.c
HEAPH   = $(PHEAP)heap.h

ITEMC   = $(PITEM)item.c
ITEMH   = $(PITEM)item.h

GRAPHC  = $(PGRAPH)graph.c
GRAPHH  = $(PGRAPH)graph.h

# the first rule runs by default when you run 'make' ('make rule' for others)
# in our case, we probably want to build the whole project by default, so we
# make our first rule have the executable as its target
#  |
#  v
$(EXE): $(OBJ) # <-- the target is followed by a list of prerequisites
	$(CC) $(CFLAGS) -o $(EXE) $(OBJ)


# okay here's another rule, this time to help make create object files
list.o: $(LISTC) $(LISTH)
	$(CC) $(CFLAGS) -c $(LISTC)

stack.o: $(STACKH) $(STACKC) $(LISTH)
	$(CC) $(CFLAGS) -c $(STACKC)

queue.o: $(QUEUEH) $(QUEUEC) $(LISTH)
	$(CC) $(CFLAGS) -c $(QUEUEC)

graph.o: $(GRAPHH) $(GRAPHC)
	$(CC) $(CFLAGS) -c $(GRAPHC)

item.o: $(ITEMH) $(ITEMC)
	$(CC) $(CFLAGS) -c $(ITEMC)

heap.o: $(HEAPH) $(HEAPC)
	$(CC) $(CFLAGS) -c $(HEAPC)

edge_class.o: $(GRAPHH) ../edge_class.c
	$(CC) $(CFLAGS) -c ../edge_class.c

clean:
	rm -f $(OBJ)
